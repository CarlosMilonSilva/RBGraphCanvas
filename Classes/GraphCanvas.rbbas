#tag ClassProtected Class GraphCanvasInherits Canvas	#tag Event		Sub MouseExit()		  ox=-1		  oy=-1		  refresh false		End Sub	#tag EndEvent	#tag Event		Sub MouseMove(X As Integer, Y As Integer)		  dim i as integer		  		  //find if the mouse is over a node		  overNode=nil		  for i=0 to ubound(nodes)		    if nodes(i).over(x,y) then 		      overNode=nodes(i)		    end if		  next		  		  ox=x		  oy=y		  refresh false		End Sub	#tag EndEvent	#tag Event		Sub Open()		  buffer=newpicture(width,height,32)		  shouldRepaint=true		  ox=-1		  oy=-1		  _showCaptions=true		  _showZero=false		  		  Open		End Sub	#tag EndEvent	#tag Event		Sub Paint(g As Graphics)		  //update buffer if needed		  if width<>buffer.width or height<>buffer.height then		    buffer=nil		    buffer=newpicture(width,height,32)		    shouldRepaint=true		  end if		  		  if shouldRepaint then		    repaint(buffer.graphics)		    shouldRepaint=false		  end if		  		  g.drawpicture buffer,0,0		  		  //draw mouse		  g.foreColor=&cCCCCCC		  g.drawline ox,0,ox,g.height		  g.drawline 0,oy,g.width,oy		  if overNode<>nil then g.drawpicture overNode.composedLabel,ox+4,oy-g.textascent-3		  		  Paint g		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub addSet(set as DataSet)		  //add a new set		  if set=nil then return		  data.append set		  shouldRepaint=true		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function axisColor() As color		  return _axisColor		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub axisColor(assigns value as color)		  _axisColor=value		  forceUpdate		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function dictValue() As dictionary		  //get the dictionary value of the graph.		  dim d, sets as dictionary		  dim i as integer		  d=new dictionary		  		  d.value("objType")="graphCanvas"		  d.value("axesColor")=axisColor		  d.value("labelColor")=labelColor		  d.value("graphName")=graphName		  d.value("xlabel")=xlabel		  d.value("ylabel")=ylabel		  d.value("tickMarks")=tickMarks		  		  sets=new dictionary		  for i=0 to ubound(data)		    sets.value(str(i))=data(i).dictValue		  next		  		  d.value("sets")=sets		  		  return d		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub drawSet(set as DataSet, g as graphics, drawLabel as boolean)		  me.drawSet(set,g,set.miny,set.maxy,set.minx,set.maxx,set.count,drawLabel)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub drawSet(set as DataSet, g as Graphics, minyv as double, maxyv as double, minxv as double, maxxv as double, maxItems as integer, drawLabel as boolean)		  //draw a set		  		  #pragma disableBackgroundTasks		  #pragma disableBoundsChecking		  		  dim spany,valy, miny, maxy, offy,sy as double		  dim spanx,valx, minx, maxx, offx, sx as double		  dim i,cnt,w, yw, thisy,thisx,ox,oy,nx,ny as double		  dim label, label2 as string		  dim allset as boolean		  dim node as GraphNode		  dim tick,tickoff, tickval, xlabOff, yLabOff as integer		  dim s as stringshape		  		  cnt=set.count		  		  for i=0 to cnt-1		    if not allset then		      xlaboff=0		      if xlabel.trim<>"" then xLaboff=g.textascent+2		      ylaboff=0		      if ylabel.trim<>"" then yLaboff=g.textascent+8		      		      yw=max(g.stringwidth(format(minyv,"-#.##")), g.StringWidth("00000.00"))		      if g.stringwidth(format(maxyv,"-#.##"))>yw then yw=g.stringwidth(format(maxyv,"-#.##"))		      		      yw=yw+15+ylaboff		      		      offx=(width-yw-20)/maxitems'cnt		      sx=yw+offx		      		      'axis		      if drawLabel then		        g.foreColor=axisColor		        g.drawline yw,0,yw,me.height-2*g.textAscent-xlaboff		        g.drawline yw,me.height-2*g.textAscent-xlabOff,g.width,me.height-2*g.textAscent-xlaboff		        tickoff=ceil(maxitems/tickmarks)		        tickval=1		        		        if xlabel.trim<>"" then		          g.foreColor=labelcolor		          g.drawString xlabel,width/2-g.stringwidth(xlabel)/2,height-g.textascent+3		        end if		        		        if ylabel.trim<>"" then		          s=new stringshape		          s.text=ylabel		          s.TextFont=g.textfont		          s.TextSize=g.textsize		          s.fillColor=labelcolor		          s.rotation=270*3.14159/180		          g.drawobject s,7+g.textascent/2,height/2		          'g.drawrect 4,height/2-g.stringwidth(ylabel)/2,g.textascent,g.stringwidth(ylabel)		        end if		      end if		      		      offy=(height-(2*g.textAscent)-40-xlabOff)/maxItems'cnt		      sy=me.height-2*g.textAscent-offy-xlaboff		      miny=sy		      maxy=40		      		      valy=minyv		      spany=(maxyv-minyv)/(maxItems-1)'(cnt-1)		      		      minx=sx		      maxx=width-20		      valx=minxv		      spanx=(maxxv-minxv)/(maxItems-1)'(cnt-1)		      		      if showZero then		        g.foreColor=&cDDDDDD		        g.drawLine yw,mapy(0,miny-maxy,minyv,maxyv,miny),width,mapy(0,miny-maxy,minyv,maxyv,miny)		        g.drawLine mapx(0,maxx-minx,minxv,maxxv,minx),0,mapx(0,maxx-minx,minxv,maxxv,minx),height-2*g.textAscent-xlabOff		      end if		      		      allset=true		    end if		    		    'labels		    if drawLabel then		      label=formatValue(valx,false)		      if label="" then label=format(valx,"-#.##")		      w=g.stringwidth(label)		      		      tick=tick+1		      		      g.bold=true		      g.foreColor=axisColor		      g.drawline sx,me.height-2*g.textAscent-2-xlabOff,sx,me.height-2*g.textAscent-xlabOff		      g.foreColor=labelcolor'&c000000		      		      if tick = tickval or tick=1 or tick=maxitems then		        g.drawstring label,sx-w/2,me.height-g.textAscent+2-xlaboff		      end if		      		      label=formatValue(valy,true)		      if label="" then label=format(valy,"-#.##")		      w=g.stringwidth(label)		      		      g.foreColor=axisColor		      g.drawline yw,sy,yw+2,sy		      g.foreColor=labelcolor'&c000000		      		      if tick = tickval or tick=1  or tick=maxitems then		        g.drawstring label,(yw-ylabOff)/2-w/2+ylabOff,sy+g.textascent/2		        tickval=tickval+tickoff		      end if		      		      g.bold=false		    end if		    		    //lines		    thisy=me.mapy(set.yvalue(i),miny-maxy,minyv,maxyv,miny)		    thisx=me.mapx(set.xvalue(i),maxx-minx,minxv,maxxv,minx)		    g.foreColor=set.getColor		    nx=thisx		    ny=thisy		    if i>0 then		      g.drawline ox,oy,nx,ny		      ox=nx		      oy=ny		    else		      ox=thisx		      oy=thisy		    end if		    		    label=formatValue(set.yvalue(i),true)		    label2=formatValue(set.xvalue(i),false)		    if label="" then label=format(set.yvalue(i),"-#.##")		    if label2="" then label2=format(set.xvalue(i),"-#.##")		    		    //nodes		    node=new GraphNode(label2,label,thisx-3,thisy-3,6,set.getColor)		    nodes.append node		    valy=valy+spany		    valx=valx+spanx		    sy=sy-offy		    sx=sx+offx		    		    node.paint(g)		  next		  		  'for i=0 to ubound(nodes)		  'nodes(i).paint(g)		  'next		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub forceUpdate()		  shouldRepaint=true		  refresh false		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function getPicture() As picture		  return buffer		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getSets() As dataSet()		  return data		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function graphName() As string		  return _GraphName		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub graphName(assigns value as string)		  _graphName=value		  forceUpdate		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function labelColor() As color		  return _labelColor		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub labelColor(assigns value as color)		  _labelColor=value		  forceUpdate		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function load(fi as folderItem) As boolean		  //load a saved graph		  if fi=nil then return false		  		  dim d,sets, sd as dictionary		  dim tmp as dataset		  dim i as integer		  		  d=new dictionary		  		  if not d.loadXml(fi) then		    return false		  end if		  		  if not d.hasKey("objType") then		    return false		  end if		  		  if d.value("objType")<>"graphCanvas" then		    return false		  end if		  		  axisColor=d.value("axesColor")		  labelColor=d.value("labelColor")		  graphName=d.value("graphName")		  xlabel=d.value("xlabel")		  ylabel=d.value("ylabel")		  tickMarks=d.value("tickMarks")		  		  sets=d.value("sets")		  redim data(-1)		  for i=0 to sets.count-1		    sd=sets.value(str(i))		    tmp=new dataSet(sd)		    addSet(tmp)		  next		  		  forceUpdate		  return true		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function mapx(xval as single, xpixspan as integer, minx as single, maxx as single, sx as integer) As integer		  //map value to screen		  dim unit as single		  unit=xpixspan/(maxx-minx)		  		  return sx+(xval-minx)*unit		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function mapy(yval as single, ypixspan as integer, miny as single, maxy as single, sy as integer) As integer		  //map value to screen		  dim unit as single		  unit=ypixspan/(maxy-miny)		  		  return sy-(yval-miny)*unit		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function maxCount() As integer		  return maxItems		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub removeSet(index as integer)		  data.remove index		  forceUpdate		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub repaint(g as graphics)		  //repaint graph		  		  #pragma disableBackgroundTasks		  #pragma disableBoundsChecking		  		  dim i, xlabOff as integer		  dim maxy,miny,maxx,minx,maxw, maxitemsi as single		  dim drawn as boolean		  		  g.textsize=10		  g.textfont="Arial"		  		  redim nodes(-1)		  g.clearrect 0,0,g.width,g.height		  		  if ubound(data)>=0 then		    //ugly...		    while i<=ubound(data) and data(i).count>1		      maxy=data(i).maxy		      miny=data(i).miny		      maxx=data(i).maxx		      minx=data(i).minx		      maxitems=data(i).count		      maxitemsi=i		      i=i+1		    wend		    		    maxw=g.stringWidth(data(0).name)		    		    //find max-min		    for i=0 to ubound(data)		      if data(i).count>1 then		        if data(i).maxy>maxy then maxy=data(i).maxy		        if data(i).miny<miny then miny=data(i).miny		        if data(i).maxx>maxx then maxx=data(i).maxx		        if data(i).minx<minx then minx=data(i).minx		        if data(i).count>maxitems then 		          maxitems=data(i).count		          maxitemsi=i		        end if		      end if		      if g.stringWidth(data(i).name)>maxw then maxw=g.stringWidth(data(i).name)		    next		    		    if minx=maxx then maxx=2*minx		    if miny=maxy then maxy=2*miny		    		    xlaboff=0		    if xlabel.trim<>"" then xLaboff=g.textascent+4		    		    //draw sets		    for i=0 to ubound(data)		      if data(i).count>1 then		        drawSet(data(i),g,miny,maxy,minx,maxx,maxitems,i=maxitemsi)		        drawn=true		      end if		      		      //captions		      if showCaptions then		        g.foreColor=data(i).getColor		        g.filloval self.width-maxw-20+3, me.height-2*g.textascent-15-g.textascent*i-3-xlabOff,6,6		        g.foreColor=&c000000		        g.drawoval self.width-maxw-20+3, me.height-2*g.textascent-15-g.textascent*i-3-xlabOff,6,6		        g.drawString data(i).name, self.width-maxw-20+12, me.height-2*g.textascent-15-g.textascent*i-5+g.textascent-xlabOff		      end if		    next		    		    if showCaptions then		      g.foreColor=&c000000		      g.drawrect self.width-maxw-20, me.height-2*g.textascent-15-g.textascent*i-xlabOff,maxw+15,g.textascent*i+10		    end if		  end if		  		  if not drawn then		    g.bold=true		    g.drawstring "No data.",g.width/2-g.stringwidth("No data.")/2,g.height/2		    g.bold=false		  end if		  		  if graphName<>"" then		    g.bold=true		    maxw=g.stringwidth(graphName)		    g.foreColor=&c888888		    g.fillrect width/2-maxw/2-5+2,3+2,maxw+10,g.textascent+7		    g.foreColor=&cffffff		    g.fillrect width/2-maxw/2-5,3,maxw+10,g.textascent+7		    g.foreColor=&c000000		    g.drawrect width/2-maxw/2-5,3,maxw+10,g.textascent+7		    g.drawString graphName,width/2-maxw/2,g.textascent+5		    g.bold=false		  end if		  		  'g.foreColor=&c000000		  'g.drawrect 0,0,g.width,g.height		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub reset()		  redim data(-1)		  xlabel=""		  ylabel=""		  graphname=""		  forceUpdate		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub save(fi as folderitem)		  if fi=nil then return		  		  dim d as dictionary		  d=dictValue		  		  call d.savexml(fi)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function setCount() As integer		  Return UBound(data) + 1		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function showCaptions() As boolean		  return _showCaptions		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub showCaptions(assigns value as boolean)		  _ShowCaptions=value		  forceUpdate		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function showZero() As boolean		  return _showZero		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub showZero(assigns value as boolean)		  _showZero=value		  forceUpdate		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function xLabel() As string		  return _xLabel		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub xLabel(assigns value as string)		  _xLabel=value		  forceUpdate		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function yLabel() As string		  return _yLabel		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub yLabel(assigns value as string)		  _yLabel=value		  forceUpdate		End Sub	#tag EndMethod	#tag Hook, Flags = &h0		Event FormatValue(value as double, yaxis as boolean) As string	#tag EndHook	#tag Hook, Flags = &h0		Event Open()	#tag EndHook	#tag Hook, Flags = &h0		Event Paint(g as graphics)	#tag EndHook	#tag Note, Name =  Info				GraphCanvas		By Alex Restrepo		send comments, suggestions, fixes to alexrestrepo@mac.com				Canvas that graphs a series of datasets. just add the sets using addSet.				Use in whatever way you like... at your own risk :P		let me know if you find it useful.		If you decide to use it in your projects, please give me credit in your about window, thanks.					#tag EndNote	#tag Property, Flags = &h1		Protected buffer As picture	#tag EndProperty	#tag Property, Flags = &h1		Protected data() As DataSet	#tag EndProperty	#tag Property, Flags = &h1		Protected maxItems As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected nodes() As graphNode	#tag EndProperty	#tag Property, Flags = &h1		Protected overNode As graphNode	#tag EndProperty	#tag Property, Flags = &h1		Protected ox As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected oy As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected shouldRepaint As boolean	#tag EndProperty	#tag Property, Flags = &h0		tickMarks As integer	#tag EndProperty	#tag Property, Flags = &h5		Protected _axisColor As color	#tag EndProperty	#tag Property, Flags = &h1		Protected _graphName As string	#tag EndProperty	#tag Property, Flags = &h5		Protected _labelColor As color	#tag EndProperty	#tag Property, Flags = &h1		Protected _showCaptions As boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected _showZero As boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected _xLabel As string	#tag EndProperty	#tag Property, Flags = &h1		Protected _yLabel As string	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="AcceptFocus"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AcceptTabs"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AutoDeactivate"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Backdrop"			Visible=true			Group="Appearance"			Type="Picture"			EditorType="Picture"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="DoubleBuffer"			Visible=true			Group="Behavior"			InitialValue="False"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="EraseBackground"			Visible=true			Group="Behavior"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Height"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="HelpTag"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="InitialParent"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockBottom"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockLeft"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockRight"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockTop"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabIndex"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabPanelIndex"			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabStop"			Visible=true			Group="Position"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="tickMarks"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="UseFocusRing"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass